import "./chunk-5WRI5ZAA.js";

// node_modules/daisyui/components/hero/object.js
var object_default = { ".hero": { "display": "grid", "width": "100%", "place-items": "center", "background-size": "cover", "background-position": "center", "& > *": { "grid-column-start": "1", "grid-row-start": "1" } }, ".hero-overlay": { "grid-column-start": "1", "grid-row-start": "1", "height": "100%", "width": "100%", "background-color": "color-mix(in oklab, var(--color-neutral) 50%, transparent)" }, ".hero-content": { "isolation": "isolate", "display": "flex", "max-width": "80rem", "align-items": "center", "justify-content": "center", "gap": "calc(0.25rem * 4)", "padding": "calc(0.25rem * 4)" } };

// node_modules/daisyui/functions/addPrefix.js
var defaultExcludedPrefixes = ["color-", "size-", "radius-", "border", "depth", "noise"];
var shouldExcludeVariable = (variableName, excludedPrefixes) => {
  if (variableName.startsWith("tw")) {
    return true;
  }
  return excludedPrefixes.some((excludedPrefix) => variableName.startsWith(excludedPrefix));
};
var prefixVariable = (variableName, prefix, excludedPrefixes) => {
  if (shouldExcludeVariable(variableName, excludedPrefixes)) {
    return variableName;
  }
  return `${prefix}${variableName}`;
};
var getPrefixedSelector = (selector, prefix) => {
  if (!selector.startsWith(".")) return selector;
  return `.${prefix}${selector.slice(1)}`;
};
var getPrefixedKey = (key, prefix, excludedPrefixes) => {
  const prefixDot = prefix ? `.${prefix}` : "";
  const prefixAmpDot = prefix ? `&.${prefix}` : "";
  if (!prefix) return key;
  if (key.startsWith("--")) {
    const variableName = key.slice(2);
    return `--${prefixVariable(variableName, prefix, excludedPrefixes)}`;
  }
  if (key.startsWith("@") || key.startsWith("[")) {
    return key;
  }
  if (key.startsWith("&")) {
    if (key.match(/:[a-z-]+\(/)) {
      return key.replace(/\.([\w-]+)/g, `.${prefix}$1`);
    }
    if (key.startsWith("&.")) {
      return `${prefixAmpDot}${key.slice(2)}`;
    }
    return key.replace(/\.([\w-]+)/g, `.${prefix}$1`);
  }
  if (key.startsWith(":")) {
    return key.replace(/\.([\w-]+)/g, `.${prefix}$1`);
  }
  if (key.includes(".") && !key.includes(" ") && !key.includes(">") && !key.includes("+") && !key.includes("~")) {
    return key.split(".").filter(Boolean).map((part) => prefix + part).join(".").replace(/^/, ".");
  }
  if (key.includes(">") || key.includes("+") || key.includes("~")) {
    return key.split(/\s*([>+~])\s*/).map((part) => {
      part = part.trim();
      if (part.includes(":where") || part.includes(":not") || part.includes(":has") || part.match(/:[a-z-]+\(/)) {
        return part.replace(/\.([\w-]+)(?=[\s:)])/g, `.${prefix}$1`);
      }
      if (part === ">" || part === "+" || part === "~") return ` ${part} `;
      return part.startsWith(".") ? getPrefixedSelector(part, prefix) : part;
    }).join("");
  }
  if (key.includes(" ")) {
    return key.split(/\s+/).map((part) => {
      if (part.startsWith(".")) {
        return getPrefixedSelector(part, prefix);
      }
      return part;
    }).join(" ");
  }
  if (key.includes(":")) {
    const [selector, ...pseudo] = key.split(":");
    if (selector.startsWith(".")) {
      return `${getPrefixedSelector(selector, prefix)}:${pseudo.join(":")}`;
    }
    return key.replace(/\.([\w-]+)/g, `.${prefix}$1`);
  }
  if (key.startsWith(".")) {
    return getPrefixedSelector(key, prefix);
  }
  return key;
};
var processArrayValue = (value, prefix, excludedPrefixes) => {
  return value.map((item) => {
    if (typeof item === "string") {
      if (item.startsWith(".")) {
        return prefix ? `.${prefix}${item.slice(1)}` : item;
      }
      return processStringValue(item, prefix, excludedPrefixes);
    }
    return item;
  });
};
var processStringValue = (value, prefix, excludedPrefixes) => {
  return value.replace(/var\(--([^)]+)\)/g, (match, variableName) => {
    if (shouldExcludeVariable(variableName, excludedPrefixes)) {
      return match;
    }
    return `var(--${prefix}${variableName})`;
  });
};
var processValue = (value, prefix, excludedPrefixes) => {
  if (Array.isArray(value)) {
    return processArrayValue(value, prefix, excludedPrefixes);
  } else if (typeof value === "object" && value !== null) {
    return addPrefix(value, prefix, excludedPrefixes);
  } else if (typeof value === "string") {
    return processStringValue(value, prefix, excludedPrefixes);
  } else {
    return value;
  }
};
var addPrefix = (obj, prefix, excludedPrefixes = defaultExcludedPrefixes) => {
  return Object.entries(obj).reduce((result, [key, value]) => {
    const newKey = getPrefixedKey(key, prefix, excludedPrefixes);
    result[newKey] = processValue(value, prefix, excludedPrefixes);
    return result;
  }, {});
};

// node_modules/daisyui/components/hero/index.js
var hero_default = ({ addComponents, prefix = "" }) => {
  const prefixedhero = addPrefix(object_default, prefix);
  addComponents({ ...prefixedhero });
};
export {
  hero_default as default
};
//# sourceMappingURL=daisyui_components_hero.js.map
